package com.example.hse.MyToDoTgBot;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class ToDoBot extends TelegramLongPollingBot {
    private final BotProperties botProperties;
    private final TaskService taskService;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    public ToDoBot(BotProperties botProperties, TaskService taskService) {
        super(botProperties.getToken());
        this.botProperties = botProperties;
        this.taskService = taskService;
    }

    @Override
    public String getBotUsername() {
        return botProperties.getUsername();
    }

    @Override
    public String getBotToken() {
        return botProperties.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message msg = update.getMessage();
            Long chatId = msg.getChatId();
            String text = msg.getText();

            if (text.startsWith("/start")) {
                handleStartCommand(chatId);
            } else if (text.startsWith("/add")) {
                handleAddCommand(chatId, text);
            } else if (text.startsWith("/active")) {
                handleActiveCommand(chatId);
            } else if (text.startsWith("/completed")) {
                handleCompletedCommand(chatId);
            } else if (text.startsWith("/done")) {
                handleDoneCommand(chatId, text);
            } else if (text.startsWith("/delete")) {
                handleDeleteCommand(chatId,text);
            } else if (text.startsWith("/help")) {
                sendHelpMessage(chatId);
            } else {
                sendMessage(chatId, " –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ ");
            }
        }
    }

    private void handleStartCommand(Long chatId) {
        String start = """
                –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ –≤—Ä–µ–º—è.
                
                –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ /help.
                """;
        sendMessage(chatId,start);
    }

    private void handleAddCommand(Long chatId, String text) {
        try {
            String[] parts = text.substring(5).split(";", 3);
            if (parts.length < 2) throw new IllegalArgumentException();

            String title = parts[0].trim();
            LocalDateTime date = parseDateTime(parts[1].trim());
            String comment = parts.length > 2 ? parts[2].trim() : "";

            Task task = taskService.createTask(chatId, title, date, comment);
            String response = "‚úÖ  –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n" +
                    "ID: " + task.getId() + "\n" +
                    "–ù–∞–∑–≤–∞–Ω–∏–µ: " + task.getTitle() + "\n" +
                    "–ö–æ–≥–¥–∞: " + task.getNotifyDate().format(formatter);
            sendMessage(chatId, response);
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: \n" +
                    "/add –ù–∞–∑–≤–∞–Ω–∏–µ; –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–º–º; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å) ");
        }
    }

    private LocalDateTime parseDateTime(String dateStr) {
        return LocalDateTime.parse(dateStr, DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
    }

    private void handleActiveCommand(Long chatId) {
        List<Task> tasks = taskService.getActiveTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, " –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. ");
            return;
        }

        StringBuilder sb = new StringBuilder(" –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: \n\n");
        for (Task task : tasks) {
            sb.append("üÜî ID: ").append(task.getId()).append("\n")
                    .append("üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ").append(task.getTitle()).append("\n")
                    .append("‚è∞ –ö–æ–≥–¥–∞: ").append(task.getNotifyDate().format(formatter)).append("\n");
            if (task.getComment() != null && !task.getComment().isEmpty()) {
                sb.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ").append(task.getComment()).append("\n");
            }
            sb.append("\n");
        }
        sendMessage(chatId, sb.toString());
    }

    private void handleCompletedCommand(Long chatId) {
        List<Task> tasks = taskService.getCompletedTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, " –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. ");
            return;
        }
        StringBuilder sb = new StringBuilder("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n");
        for (Task task : tasks) {
            sb.append("üÜî ID: ").append(task.getId()).append("\n")
                    .append("üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ").append(task.getTitle()).append("\n")
                    .append("‚è∞ –ë—ã–ª–æ –Ω–∞: ").append(task.getNotifyDate().format(formatter)).append("\n\n");
        }
        sendMessage(chatId, sb.toString());
    }

    private void handleDoneCommand(Long chatId, String text) {
        try {
            Long taskId = Long.parseLong(text.substring(6).trim());
            if (taskService.markAsCompleted(taskId, chatId)) {
                sendMessage(chatId, " –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. ");
            } else {
                sendMessage(chatId, " –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ");
            }
        } catch (Exception e) {
            sendMessage(chatId, " –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ : /done [ID_–∑–∞–¥–∞—á–∏]");
        }
    }

    private void handleDeleteCommand(Long chatId, String text) {
        try {
            Long taskId = Long.parseLong(text.substring(6).trim());
            if (taskService.deleteTask(taskId,chatId)) {
                sendMessage(chatId, " –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞. ");
            } else {
                sendMessage(chatId," –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ");
            }
        } catch (Exception e) {
            sendMessage(chatId, " –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ : /delete [ID_–∑–∞–¥–∞—á–∏]");
        }
    }

    private void sendHelpMessage(Long chatId) {
        String help = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 
                
                /add [–ù–∞–∑–≤–∞–Ω–∏–µ]; [–î–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–º–º]; [–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]
                        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                        –ü—Ä–∏–º–µ—Ä: /add –í—Å—Ç—Ä–µ—á–∞; 15.12.2023 14:30; –ö–∞–±–∏–Ω–µ—Ç 305
                
                        /active - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                        /completed - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                        /done [ID] - –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                        /delete [ID] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
                        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                """;
        sendMessage(chatId,help);
    }

    public void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Component
    @ConfigurationProperties(prefix = "telegram.bot")
    @Data
    public static class BotProperties {
        private String token;
        private String username;
    }
}
